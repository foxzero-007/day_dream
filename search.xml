<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript进阶（2）</title>
      <link href="/daydream/2021/04/15/JavaScript%E8%BF%9B%E9%98%B6%EF%BC%882%EF%BC%89/"/>
      <url>/daydream/2021/04/15/JavaScript%E8%BF%9B%E9%98%B6%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>定义和调用函数：（传统写法）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn1(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//输出结果：3</span></span><br></pre></td></tr></table></figure><p>定义和调用函数：（ES6中的写法）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn2=<span class="function">(<span class="params">a,b</span>)=&gt;</span> a+b;</span><br><span class="line"><span class="built_in">console</span>.log(fn2(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//输出结果：3</span></span><br></pre></td></tr></table></figure><p>二者的效果相同。</p><p>在箭头函数中，如果方法体内有两句话，那就需要在方法体外加上{}括号。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn2=<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;haha&#x27;</span>);</span><br><span class="line">               <span class="keyword">return</span> a+b;</span><br><span class="line">              &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fn2(<span class="number">1</span>,<span class="number">2</span>))<span class="comment">//输出结果：3</span></span><br></pre></td></tr></table></figure><p>从上方的箭头函数中，我们可以很清晰的找到函数名，参数名，方法体。</p><p>上方代码中：</p><ul><li>如果有且仅有1个参数，则（）可以省略</li><li>如果方法体内仅有1条语句，则{}可以省略，但前提是，这条语句必须是return。</li></ul><h3 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h3><blockquote><p>箭头函数只是为了让函数写起来更优雅吗？当然不是，还有一个很大的作用是与this的指向有关</p></blockquote><p>ES5中，this指向的是函数被调用的对象；而ES6的箭头函数中，this指向的是函数被定义时所指向的对象。</p><p>简单来说，箭头函数的this，是不会变的，永远绑定在当前的环境下。</p><h2 id="参考默认值"><a href="#参考默认值" class="headerlink" title="参考默认值"></a>参考默认值</h2><p><strong>传统写法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">param = <span class="string">&#x27;hello&#x27;</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log)(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ES6中定义方法时，我们可以给方法里的从参数加一个<strong>默认值</strong>（    缺省值）：</p><ul><li>方法被调用时，如果没有给参数赋值，那就用默认值；</li><li>方法被调用时，如果给参数复制了新的值，那就用新的值。</li></ul><p>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn2=<span class="function">(<span class="params">a,b=<span class="number">5</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;haha&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fn2(<span class="number">1</span>));<span class="comment">//第二个参数使用默认值5，输出结果：6</span></span><br><span class="line"><span class="built_in">console</span>.log(fn2(<span class="number">1</span>,<span class="number">8</span>));<span class="comment">//输出结果：9</span></span><br></pre></td></tr></table></figure><p><strong>提醒1</strong>：默认值后面，不能再有<strong>没有默认值的变量</strong>。比如（a,b,c）这三个参数，如果我们给b设置了默认值，那么就一定要给c设置默认值。</p><p><strong>提醒2</strong>：</p><p>我们来看下面这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x=<span class="string">&#x27;smyh&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x,y=x</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x,y);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">&#x27;vae&#x27;</span>);</span><br></pre></td></tr></table></figure><p>注意第二行代码，我们给y赋值x，这里的x是括号里的第一个参数，并不是第一行代码里定义的x，打印结果为<code>vae vae</code></p><p>如果我们将第一个参数修改一下，改成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x=<span class="string">&quot;smyh&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">z,y=x</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(z,y);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">&quot;vae&quot;</span>);</span><br></pre></td></tr></table></figure><p>此时打印结果为：<code>vae smyh</code></p><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>注意区分：</p><ul><li>扩展运算符的格式为：<code>...</code></li><li>rest运算符的格式为<code>...变量名</code></li></ul><p>有了ES6，当我们在定义一个方法，但是不确定其参数个数时，我们可以用<strong>扩展运算符</strong>作为参数。</p><p>以前，我们在定义方法时，参数要确定个数，如下：（程序会报错）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">    <span class="built_in">console</span>.log(d);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>上述代码中，因为方法的参数是三个，但是使用的时候是用到了四个参数，所以会报错；</p><p>现在，我们有了扩展运算符，就不必担心报错的问题了。代码可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">...arg</span>)</span>&#123;<span class="comment">//当不确定方法的参数时，可以使用扩展运算符</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(arg[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(arg[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(arg[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//方法中定义了四个参数，但是只引用了三个参数，ES6中并不会报错。</span></span><br></pre></td></tr></table></figure><p>上方代码中注意，arg参数之后，不能再加别的参数，否则会编译报错。</p><p><strong>举例</strong>：数组赋值问题</p><p>我们来分析一段代码：（将数组arr1赋值给arr2）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1=[<span class="string">&#x27;www&#x27;</span>,<span class="string">&#x27;smyhe&#x27;</span>,<span class="string">&#x27;com&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> arr2=arr1;<span class="comment">//将arr1赋值给arr2，其实是让arr2指向arr1的内存地址</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr1:&#x27;</span>+arr1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr2:&#x27;</span>+arr2);</span><br><span class="line">ocnsole.log(<span class="string">&#x27;------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line">arr2.push(<span class="string">&#x27;你懂的&#x27;</span>);<span class="comment">//往arr2里添加一部分内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr1:&#x27;</span>+arr1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr2:&#x27;</span>+arr2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p>上方代码中，我们往arr2里添加le<code>你懂的</code>，却发现，arr1里面也有这个内容。原因是：<code>let arr2=arr1</code>其实是让arr2指向arr1的地址。也即是，二者指向的是同一个内存地址。</p><p>如果不想让arr1和arr2指向同一个内存地址，我们可以借助扩展运算符来做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1=[<span class="string">&#x27;www&#x27;</span>,<span class="string">&#x27;smyhvae&#x27;</span>,<span class="string">&#x27;com&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> arr2=[...arr1];<span class="comment">//arr2会重新开辟内存地址</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr1:&#x27;</span>+arr1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr2:&#x27;</span>+arr2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;----------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line">arr2.push(<span class="string">&#x27;你懂的&#x27;</span>);<span class="comment">//往arr2里面添加一部分内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr1:&#x27;</span>+arr1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr2:&#x27;</span>+arr2);</span><br></pre></td></tr></table></figure><p>我们明白了这个例子，就可以避免开发中很多业务逻辑上的bug。</p><h2 id="rest运算符"><a href="#rest运算符" class="headerlink" title="rest运算符"></a><code>rest</code>运算符</h2><p><code>rest</code>在英文中指的是<strong>剩余部分</strong>（不是指休息）。</p><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">first,second,...arg</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ar.length);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);<span class="comment">//调用函数后，输出结果为5</span></span><br></pre></td></tr></table></figure><p>上方代码的输出结果为5.调用<code>fn()</code>时，里面有七个参数，而<code>arg</code>指的是剩下的部分（因为除去了<code>first</code> 和<code>second</code>).</p><p>从上面的例子可以看出，<code>rest</code>运算符适用于：知道前面的一部分参数的数量，丹斯对于后面的剩余的参数数量未知的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
            <tag> Ecmascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript进阶（1）</title>
      <link href="/daydream/2021/03/30/JavaScript%E8%BF%9B%E9%98%B6%EF%BC%88ES5=ES6%EF%BC%89/"/>
      <url>/daydream/2021/03/30/JavaScript%E8%BF%9B%E9%98%B6%EF%BC%88ES5=ES6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a><strong>严格模式</strong></h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>理解</strong>：ES5中添加的运行模式：“严格模式”（strict mode），该模式下javascript在更严格的语法条件下运行</p><p><strong>目的</strong>：</p><ul><li>消除js中语法的不合理，不严谨的地方</li><li>消除代码不安全之处</li><li>为未来新的js版本做铺垫</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>针对整个脚本文件：将use strict 放在整个脚本文件的第一行，则整个脚本文件将以严格模式运行。</li><li>针对单个函数：将use strict放在函数体的第一行，则整个函数以严格模式运行。</li></ul><h3 id="语法和行为改变"><a href="#语法和行为改变" class="headerlink" title="语法和行为改变"></a>语法和行为改变</h3><ul><li>必须使用var声明变量</li><li>禁止自定义的函数中的this指向window</li><li>对象不能有重名的属性</li></ul><h2 id="严格模式和普通模式的区别"><a href="#严格模式和普通模式的区别" class="headerlink" title="严格模式和普通模式的区别"></a>严格模式和普通模式的区别</h2><blockquote><p>仅列举一部分</p></blockquote><h3 id="全局变量显式声明"><a href="#全局变量显式声明" class="headerlink" title="全局变量显式声明"></a>全局变量显式声明</h3><p>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。在严格模式中禁止使用这种用法，全局变量必须显式声明。</p><h3 id="禁止this关键字指向全局对象："><a href="#禁止this关键字指向全局对象：" class="headerlink" title="禁止this关键字指向全局对象："></a>禁止this关键字指向全局对象：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>上方代码中，普通模式打印的是window，严格模式下打印的是undefined。</p><h3 id="构造函数必须通过new实例化对象"><a href="#构造函数必须通过new实例化对象" class="headerlink" title="构造函数必须通过new实例化对象"></a>构造函数必须通过new实例化对象</h3><p>构造函数必须通过new实例化对象，否则报错。因为this为undefined，此时无法设置属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Cat = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Cat(<span class="string">&#x27;haha&#x27;</span>);</span><br></pre></td></tr></table></figure><p>上方代码，在严格模式下会报错。</p><h3 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h3><p>普通模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。</p><p>普通模式下，如果有函数有多个重名的参数，可以用arguments[i]读取，严格模式下，多个重名参数属于语法错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obi =&#123;</span><br><span class="line">    username:<span class="string">&#x27;smyh&#x27;</span>;</span><br><span class="line">    username:<span class="string">&#x27;vae&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码，在严格模式下属于语法错误，因为有重名的属性。</p><h3 id="函数必须声明在顶层"><a href="#函数必须声明在顶层" class="headerlink" title="函数必须声明在顶层"></a>函数必须声明在顶层</h3><p>严格模式只允许在全局作用域或函数作用域的最顶层声明函数，也就是说，不允许在非函数的代码块内声明函数。</p><h3 id="新增关键字"><a href="#新增关键字" class="headerlink" title="新增关键字"></a>新增关键字</h3><p>严格模式新增保留字：</p><p>implements，interface，let，package，private，protected，public，static，yield。</p><h2 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h2><h3 id="json对象转化"><a href="#json对象转化" class="headerlink" title="json对象转化"></a>json对象转化</h3><ul><li><p>js对象（数组）–&gt; json对象（数组）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringfy(obj/arr)</span><br></pre></td></tr></table></figure></li><li><p>json对象（数组）–&gt; js对象（数组）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(json)</span><br></pre></td></tr></table></figure><p>上面两种方法是ES5中提供的。</p><p>我们常说的<strong>JSON字符串</strong>只有两种：json对象，json数组。</p><p><code>typeof json字符串</code>的返回值是String。</p></li></ul><h2 id="Object的扩展"><a href="#Object的扩展" class="headerlink" title="Object的扩展"></a>Object的扩展</h2><p>ES5给Object扩展了一些静态方法，常用的有2个。</p><ul><li>方法一</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create(prototype,[descriptors])</span><br></pre></td></tr></table></figure><p>作用：以指定对象为原型，创建新的对象，同时，第二个参数可以为新的对象添加新的属性，并对此属性进行描述。</p><p><strong>example1</strong>：（没有第二个参数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 =&#123;<span class="attr">username</span>:<span class="string">&#x27;smyhvae&#x27;</span>,<span class="attr">age</span>:<span class="number">26</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 =&#123;<span class="attr">address</span>:<span class="string">&#x27;shenzhen&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">obj2=<span class="built_in">Object</span>.create(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure><p><strong>结果</strong>：obj1成为了obj2的原型</p><p><strong>example2</strong>:（有第二个参数时）</p><p>第二个参数可以给新的对象添加新的属性，我们修改上面的代码，尝试给obj2添加新属性<code>sex</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1=&#123;<span class="attr">username</span>:<span class="string">&#x27;smyhvae&#x27;</span>,<span class="attr">age</span>:<span class="number">26</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2=&#123;<span class="attr">address</span>:<span class="string">&#x27;shenzhen&#x27;</span>&#125;;</span><br><span class="line">obj2=<span class="built_in">Object</span>.create(obj1,&#123;</span><br><span class="line">    sex:&#123;</span><br><span class="line">        value:<span class="string">&#x27;男&#x27;</span>，</span><br><span class="line">        writable：<span class="literal">false</span>,</span><br><span class="line">        configurable:<span class="literal">true</span>,</span><br><span class="line">        enumerable:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure><p>上方代码中，我们通过第5行的sex给obj2设置了一个新的属性<code>sex</code></p><p>但是要通过<code>value</code>来设置属性（第6行）。</p><p>设置完属性值后，这个属性值默认是不可修改的，要通过<code>writable</code>来设置。总而言之，这几个关键字解释入下：</p><ul><li><code>value</code>：设置属性值</li><li><code>writable</code>：标识当前属性值是否可修改 ，如果不写的话，默认为false，不可修改。</li><li><code>configurable</code>：标识当前属性是否可以被删除，默认为false，不可删除。</li><li><code>enumerable</code>：标识当前属性是否能用for in 枚举。默认为false，不可。</li></ul><h3 id="单独设置属性"><a href="#单独设置属性" class="headerlink" title="单独设置属性"></a>单独设置属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj2,<span class="string">&#x27;sex&#x27;</span>,&#123;</span><br><span class="line">    value:<span class="string">&#x27;cc&#x27;</span>,</span><br><span class="line">    writable:<span class="literal">true</span>,</span><br><span class="line">    configurable:<span class="literal">true</span>,</span><br><span class="line">    enumerable:<span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>方法二</li></ul><blockquote><p>这个方法有点难理解</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperties(object,descriptors)</span><br></pre></td></tr></table></figure><p><strong>作用</strong>：为指定对象定义扩展多个属性。</p><p><strong>example</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2=&#123;</span><br><span class="line">    firstname:<span class="string">&#x27;smyh&#x27;</span>,</span><br><span class="line">    lastname:<span class="string">&#x27;vae&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj2,&#123;</span><br><span class="line">    fullName:&#123;</span><br><span class="line">        get:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.firstName+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">this</span>.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        set:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> names = data.split(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">            <span class="built_in">this</span>.firstName=names[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">this</span>.lastName=names[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj2.fullName);</span><br><span class="line">obj2.firstName=<span class="string">&#x27;tim&#x27;</span>;</span><br><span class="line">obj2.lastName=<span class="string">&#x27;duncan&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2.fullName);</span><br><span class="line">obj2.fullName=<span class="string">&#x27;kobe-bryant&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2.fullName);</span><br></pre></td></tr></table></figure><ul><li>get： 用来获取当前属性值的回调函数</li><li>set：修改当前属性值得触发的回调函数，并且实参即为修改后的值</li></ul><h2 id="Object的扩展（二）"><a href="#Object的扩展（二）" class="headerlink" title="Object的扩展（二）"></a>Object的扩展（二）</h2><p>obj对象本身就自带了两个方法。格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get 属性名（）&#123;&#125;用来得到当前属性值的回调函数</span><br><span class="line">set 属性名（）&#123;&#125;用来监视当前属性值变化的回调函数</span><br></pre></td></tr></table></figure><p><strong>example</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    firstName:<span class="string">&#x27;kobe&#x27;</span>,</span><br><span class="line">    lastNmae:<span class="string">&#x27;bryant&#x27;</span>,</span><br><span class="line">    <span class="keyword">get</span> <span class="title">fullName</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName+<span class="string">&#x27;&#x27;</span>+<span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> <span class="title">fullName</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> names=data.split(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.firstName=names[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">this</span>.lastName=names[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.fullName);</span><br><span class="line">obj.fullName=<span class="string">&#x27;curry stephen&#x27;</span>;</span><br><span class="line">cosnole.log(obj.fullName);</span><br></pre></td></tr></table></figure><h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><blockquote><p>下面的方法都是给数组的实例用的</p></blockquote><p><strong>方法一</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.indexOf(value)</span><br></pre></td></tr></table></figure><p>作用：获取value在数组中的第一个下标。</p><p><strong>方法二</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.lastIndexOf(value)</span><br></pre></td></tr></table></figure><p>作用：获取value在数组中的最后一个下标。</p><p><strong>方法三</strong>：遍历数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p><strong>方法四</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>作用：遍历数组返回一个新的数组，返回的是<strong>加工之后</strong>的新数组。</p><p><strong>方法五</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>作用：遍历过滤出一个新的子数组，返回条件为true的值。</p><h2 id="函数function的扩展：bind（）"><a href="#函数function的扩展：bind（）" class="headerlink" title="函数function的扩展：bind（）"></a>函数function的扩展：bind（）</h2><blockquote><p>ES5中新增了bind（）函数来改变this的指向。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind(obj)</span><br></pre></td></tr></table></figure><p>作用：将函数内的this绑定为obj，并将函数返回。</p><p><strong>面试题</strong>：call()、apply()和bind()的区别：</p><ul><li>都能改变this的指向</li><li>call()\apply()是<strong>立即调用函数</strong></li><li>bind():绑定完this后，不会立即调用当前函数，而是<strong>将函数返回</strong>因此后面还需要再加（）才能调用。</li></ul><p>PS：bind()传参方式和call()一样。</p><p><strong>分析</strong>：</p><p>为什么ES5中要加入bind()方法来改变this的指向呢？因为bind()不会立即调用当前函数。</p><p>bind()通常使用在回调函数中，因为回调函数并不会立即调用。如果你希望在回调函数中改变this，不妨使用bind()。</p><h2 id="ES6的环境配置-（为了兼容ES5）"><a href="#ES6的环境配置-（为了兼容ES5）" class="headerlink" title="ES6的环境配置 （为了兼容ES5）"></a>ES6的环境配置 （为了兼容ES5）</h2><p>掌握ES6之后，如果要考虑ES5的兼容性，可以这样做：写ES6语法的JS代码，然后通过Babel将ES6转换为ES5。</p><p>但是，在这之前，我们需要配置一下相关的环境。</p><h3 id="建立工程目录"><a href="#建立工程目录" class="headerlink" title="建立工程目录"></a>建立工程目录</h3><ol><li>先建立一个空的工程目录ES6Demo，并在目录下建立两个文件夹src和dist：<ul><li>src：书写ES6代码，我们写的js程序都放在这里。</li><li>dist：利用Babel编译生成的ES5代码。<strong>我们在HTML页面需要引入dist里的js文件</strong>。</li></ul></li><li>在src里创建新建文件index.html：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">            &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width,initial-scalej=1.0&quot;</span>&gt;</span><br><span class="line">                &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;iek=edge&quot;</span>&gt;</span><br><span class="line">                    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;./dist/index.js&quot;</span>&gt;&lt;/scrpt&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>，上方代码中，我们引入的是dist目录下的js文件。</p><p>然后我们新建文件src/index .js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="string">&#x27;smyhvae&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> b=<span class="string">&#x27;qianguyihao&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><p>这个文件是一个ES6语法的js文件，稍后，我们尝试把这个ES6语法的js文件转化为ES5的js文件 。</p><p>PS:我们在 写代码的时候，能用单引号尽量用单引号，而不是双引号，前者在压缩之后，程序会执行更快。</p><h2 id="全局安装Babel-Cli"><a href="#全局安装Babel-Cli" class="headerlink" title="全局安装Babel-Cli"></a>全局安装Babel-Cli</h2><p>（1） 初始化项目：</p><p>在安装Babel之前，需要先用npm init先初始化我们的项目。打开终端或者通过cmd打开命令行工具，进入项目目录，输入如下指令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>上方代码中，-y代表全部默认同意，就不用一次次按回车了（稍后在再根据需要，在文件中手动修改）。命令执行完成后，会在项目的根目录下生成package.json文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;es6demo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>:<span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;main&quot;</span>:<span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;test&quot;</span>:<span class="string">&quot;echo  \&quot;Error:no test specified\&quot;&amp;&amp; exit1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>:<span class="string">&quot;smyhvae&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>:<span class="string">&quot;ISC&quot;</span>                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS: VS Code 里打开终端的快捷键是：Contol+~。</p><p>（2）全局安装Babel-cli：</p><p>在终端输入以下命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g babel-cli</span><br></pre></td></tr></table></figure><p>如果安装比较慢的话，MAC可以用cnpm安装，windows下可以使用npm切换到taobao镜像。</p><p>（3）本地安装babel-preset-es2015和babel-cli:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015 babel-cli</span><br></pre></td></tr></table></figure><p>安装完成后，会发现package.json文件，已经多了devDependencies选项：</p><p>（4）新建.babelrc:</p><p>在根目录下新建文件.babelrc，输入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;presets&quot;:[</span><br><span class="line">&quot;es2015&quot;</span><br><span class="line">],</span><br><span class="line">&quot;plugins&quot;:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(5)开始转换：</p><p>现在，我们应该可以将ES6的文件转化为ES5的文件了，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel src&#x2F; index.js -o dist&#x2F;index.js</span><br></pre></td></tr></table></figure><p>我们可以将上面这个名令进行简化一下。操作如下：</p><p>在文件package.json中修改scripts中的内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>:<span class="string">&quot;babel src/index.js -o dist/index.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前为止，环境配置好了。以后，我们执行如下命令，即可将src/index.js这个ES6文件转化为dist/index.js这个ES5文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p> 我们执行上面的命令后发现，dist目录下会生成ES5的JS文件：index.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> a=<span class="string">&#x27;smyhvae&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="string">&#x27;qianguyihao&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><p>当我们打开网页后，就可以在浏览器的控制台，看到代码输出的结果。</p><h2 id="ES6的变量声明"><a href="#ES6的变量声明" class="headerlink" title="ES6的变量声明"></a>ES6的变量声明</h2><p>ES6中新增了let和const来定义变量：</p><ul><li>var：ES5和ES6中，定义<strong>全局变量</strong>（是variable的简写）。</li><li>let：定义**局部变量 **，替代var。</li><li>const：定义<strong>常量</strong>（定义后，不可更改）。</li></ul><h3 id="var-全局变量"><a href="#var-全局变量" class="headerlink" title="var:全局变量"></a>var:全局变量</h3><p>看下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>上方代码是可以输出结果的，输出结果为1。因为var是全局声明的，所以 ，即使实在区块里声明，但仍然在全局起作用。</p><p>再看下面这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//这里的a指的是区块里的a</span></span><br></pre></td></tr></table></figure><p>上方代码的输出结果为2；因为var是全局声明的。</p><p><strong>总结：</strong></p><p> 用var定义的全局变量会污染整个js的作用域。</p><h3 id="let：定义局部变量"><a href="#let：定义局部变量" class="headerlink" title="let：定义局部变量"></a>let：定义局部变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">2</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>上方的代码输出结果为2。用let声明的变量，只在局部（<strong>块级作用域内</strong>）起作用。</p><p>let是防止数据污染，我们来看下面这个<strong>for循环</strong>的例子，很经典。</p><p>1、用var声明变量：（）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;循环体中：&#x27;</span>+i);</span><br><span class="line">    <span class="comment">//每循环一次，就会在&#123;&#125;所在的块级作用域中定义一个新的i</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;循环体外：&quot;</span>+i);</span><br></pre></td></tr></table></figure><p>上方代码可以正常打印结果，且最后一行的打印结果是10。说明循环体外定义的变量i，是在全局起作用的。</p><p>2、用let声明变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;循环体外：&#x27;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;循环体外：&#x27;</span>+i);</span><br></pre></td></tr></table></figure><p>上方代码的最后一行无法打印结果，也就是说会打印报错。因为用let定义的变量i，只在{ }这个<strong>块级作用域</strong>里生效。</p><p><strong>总结：</strong>我们要习惯用let声明，减少var声明带来的污染全局空间。</p><p>为了进一步说明let不会带来污染，需要说明的是：当我们定义了let a=1时，如果我们在同一个作用域内继续定义let a = 2，是会报错的。</p><h3 id="const-定义常量"><a href="#const-定义常量" class="headerlink" title="const:定义常量"></a>const:定义常量</h3><p>在程序开发中，有些变量是希望声明后，在业务层就不再发生变化，此时可以用const来定义。</p><p><strong>example</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name=<span class="string">&#x27;smyhvae&#x27;</span>;</span><br></pre></td></tr></table></figure><p>用const声明的变量，只在局部（块级作用域内）起作用。</p><h3 id="let和const的作用【important】"><a href="#let和const的作用【important】" class="headerlink" title="let和const的作用【important】"></a>let和const的作用【important】</h3><p>let和const的作用如下：</p><ul><li>禁止重复声明 </li><li>支持块级作用域</li><li>控制修改</li></ul><p>相反，用var声明的变量：可以重复声明、<strong>没有块级作用域</strong>、不能限制。</p><h3 id="for循环举例【经典案例】"><a href="#for循环举例【经典案例】" class="headerlink" title="for循环举例【经典案例】"></a>for循环举例【经典案例】</h3><p><strong>代码1</strong>、我们先来看看如下代码：（用var定义变量i）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aa&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bb&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cc&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dd&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> myBtn=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;myBtn.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">                myBtn[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">                    alert(i);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可能会感到诧异，为何点击任何一个按钮，弹出的内容都是4呢？这是因为，我们用var定义的变量i，实在全局作用域声明的。整个代码中，自始至终，只有一个变量。当我们还没点击按钮之前，变量i已经循环到4了。</p><p>也就是说，上面的for循环，相当于如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line">myBtn[<span class="number">0</span>].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(i);</span><br><span class="line">&#125;;</span><br><span class="line">i++;</span><br><span class="line">myBtn[<span class="number">1</span>].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(i);</span><br><span class="line">&#125;;</span><br><span class="line">i++;</span><br><span class="line">myBtn[<span class="number">2</span>].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(i);</span><br><span class="line">&#125;;</span><br><span class="line">i++;</span><br><span class="line">myBtn[<span class="number">3</span>].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(i);</span><br><span class="line">&#125;;</span><br><span class="line">i++;</span><br><span class="line"><span class="comment">//到这里，i的值已经是4了。因此，当我们点击按钮时，i的值一直都是4</span></span><br></pre></td></tr></table></figure><p><strong>代码2</strong>、上面的代码中，如果我们改为用let定义变量i：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aa&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bb&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cc&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dd&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> myBtn=<span class="built_in">document</span>.getElementByTagName(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;myBtn.length; i++ )&#123;</span></span><br><span class="line"><span class="javascript">                myBtn[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">                    alert(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们用let定义变量i，在循环的过程中，每执行一次循环体，就会诞生一个新的i。循环体执行4次，就会有4个i。</p><h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><p>ES6允许我们，通过数组或者对象的方式，对一组变量进行赋值，这被称为解构。</p><p>解构赋值在实际开发中可以大量减少我们的代码量，并且让程序结构更清晰。</p><h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><p><strong>举例</strong>：</p><p>通常情况下，我们为一组变量赋值时，一般是这样写的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> c=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>现在我们可以通过数组解构的方式进行赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>二者效果是一样的。</p><p><strong>解构的默认值</strong></p><p>在解构赋值时，是允许使用默认值的。举例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//一个变量时</span></span><br><span class="line">    <span class="keyword">let</span> [foo=<span class="literal">true</span>]=[];</span><br><span class="line">    <span class="built_in">console</span>.log(foo);<span class="comment">//输出结果：true</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//两个变量时</span></span><br><span class="line">    <span class="keyword">let</span> [a,b]=[<span class="string">&#x27;生命一号&#x27;</span>]</span><br><span class="line">    <span class="comment">//a赋值为：生命一号。b没有赋值</span></span><br><span class="line">    <span class="built_in">console</span>.log(a+<span class="string">&#x27;,&#x27;</span>+b);</span><br><span class="line">    <span class="comment">//输出结果为：生命一号，undefined</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//两个变量时</span></span><br><span class="line">    <span class="keyword">let</span>[a,b=<span class="string">&#x27;smyhvae&#x27;</span>]=[<span class="string">&#x27;生命一号&#x27;</span>]</span><br><span class="line">    <span class="comment">//a赋值为：生命一号，b采用默认值：smyhvae</span></span><br><span class="line">    <span class="built_in">console</span>.log(a+<span class="string">&#x27;,&#x27;</span>+b);</span><br><span class="line">    <span class="comment">//输出结果：生命一号，smyhvae</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>undefined和null的区别：</p><p>如果我们在赋值时，采用的是undefined或者null，那会有什么区别呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> [a,b=<span class="string">&#x27;smyhvae&#x27;</span>]=[<span class="string">&#x27;生命一号&#x27;</span>，<span class="literal">undefined</span>];</span><br><span class="line">    <span class="comment">//b虽然被赋值为undefined，但是b会采用默认值</span></span><br><span class="line">    <span class="built_in">console</span>.log(a+<span class="string">&#x27;,&#x27;</span>+b);</span><br><span class="line">    <span class="comment">//输出结果：生命一号，smyhvae</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> [a,b=<span class="string">&#x27;smyhvae&#x27;</span>]=[<span class="string">&#x27;生命一号&#x27;</span>,<span class="literal">null</span>];</span><br><span class="line">    <span class="comment">//b被赋值为null</span></span><br><span class="line">    <span class="built_in">console</span>.log(a+<span class="string">&#x27;,&#x27;</span>+b);</span><br><span class="line">    <span class="comment">//输出结果：生命一号，null</span></span><br></pre></td></tr></table></figure><p>上方代码分析：</p><ul><li>undefined：相当于什么都没有，此时b采用默认值</li><li>null：相当于有值，但值为null</li></ul><h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><p>通常情况下，我们从接口拿到json数据后，一般这么赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=json.a;</span><br><span class="line"><span class="keyword">var</span> b=json.b;</span><br><span class="line"><span class="keyword">var</span> c=json.c;</span><br></pre></td></tr></table></figure><p>上面这样写比较麻烦。</p><p>现在，我们同样可以针对对象，进行解构赋值。</p><p><strong>举例如下</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;foo,bar&#125;=&#123;<span class="attr">bar</span>:<span class="string">&#x27;我是bar的值&#x27;</span>,<span class="attr">foo</span>:<span class="string">&#x27;我是foo的值&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo+<span class="string">&#x27;,&#x27;</span>+bar);</span><br><span class="line"><span class="comment">//输出结果：我是键foo的值，我是键bar的值</span></span><br></pre></td></tr></table></figure><p>上方代码可以看出，对象的解构和数组的解构，有一个最重要的区别：<strong>数组</strong>的元素是按次序排列的，变量的取值由他的<strong>位置</strong>决定；而<strong>对象的属性没有次序</strong>，是<strong>根据键来取值的</strong>。</p><p><strong>圆括号的使用：</strong></p><p>如果foo在解构前就定义了，此时再去解构就会出问题。</p><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo=<span class="string">&#x27;haha&#x27;</span>;</span><br><span class="line">&#123; foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br></pre></td></tr></table></figure><p>需要解决报错，只要在解构的语句外边，加一个圆括号：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="string">&#x27;haha&#x27;</span>;</span><br><span class="line">(&#123; foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(foo);<span class="comment">//输出结果: aaa</span></span><br></pre></td></tr></table></figure><h3 id="字符串解构"><a href="#字符串解构" class="headerlink" title="字符串解构"></a>字符串解构</h3><p>字符串也可以解构，这是因为，此时字符串被转换为了一个类似数组的对象。举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b,c,d] = <span class="string">&#x27;aaaa&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//输出结果：string</span></span><br></pre></td></tr></table></figure><h2 id="for…of-循环"><a href="#for…of-循环" class="headerlink" title="for…of 循环"></a>for…of 循环</h2><p>ES6中如果要遍历一个数组，可以这样做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr1)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for…of的循环可以避免 我们开拓内存空间，增加代码运行的效率，建议多使用。</p><p><strong>注意</strong>：上面的数组中，for…of获取的是数组里的值；for…in获取的是index索引值。</p><h3 id="Map对象的遍历"><a href="#Map对象的遍历" class="headerlink" title="Map对象的遍历"></a>Map对象的遍历</h3><p>for…of 既可以遍历数组，也可以遍历Map对象。</p><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>我们以前让字符串进行拼接的时候。可以这样做：（传统写法的字符串拼接）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;aaaa&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> age=<span class="string">&#x27;26&#x27;</span>;</span><br><span class="line">]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;name:&#x27;</span>+name+<span class="string">&#x27;,age:&#x27;</span>+age);<span class="comment">//传统写法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`name:<span class="subst">$&#123;name&#125;</span>,age:<span class="subst">$&#123;age&#125;</span>`</span>);<span class="comment">//ES6写法</span></span><br></pre></td></tr></table></figure><p>传统写法比较繁琐且容易出错，ES6写法更为实用</p><p><strong>注意</strong>，上方代码中，倒数第二行使用的符号是反引号（tab键上方）</p>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
            <tag> Ecmascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现词频分析和词云生成</title>
      <link href="/daydream/2020/11/11/Python%E5%AE%9E%E7%8E%B0%E8%AF%8D%E9%A2%91%E5%88%86%E6%9E%90%E5%92%8C%E8%AF%8D%E4%BA%91%E7%94%9F%E6%88%90/"/>
      <url>/daydream/2020/11/11/Python%E5%AE%9E%E7%8E%B0%E8%AF%8D%E9%A2%91%E5%88%86%E6%9E%90%E5%92%8C%E8%AF%8D%E4%BA%91%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>由于建模需要，博主简单学习了词频分析和词云生成，本博客仅适用于初学者第一次使用来借鉴</p><span id="more"></span><h1 id="Python实现词频分析和词云生成"><a href="#Python实现词频分析和词云生成" class="headerlink" title="Python实现词频分析和词云生成"></a>Python实现词频分析和词云生成</h1><p><em>1. 词频分析</em></p><p><strong>词频分析：</strong>所谓词频分析就是对一篇文章中的高频词语进行列举并计数</p><p><strong>实现方式：</strong>调用nltk的库，对.txt文本进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">stop_words = nltk.corpus.stopwords.words(<span class="string">&#x27;english&#x27;</span>)</span><br><span class="line"><span class="comment">#stop_words调用nltk预先定义好的不需要统计的词语字典</span></span><br><span class="line">newStopWords = [<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;It&#x27;</span>,<span class="string">&#x27;The&#x27;</span>,<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;use&#x27;</span>,<span class="string">&#x27;this&#x27;</span>,<span class="string">&#x27;They&#x27;</span>,<span class="string">&#x27;Im&#x27;</span>,<span class="string">&#x27;If&#x27;</span>,<span class="string">&#x27;So&#x27;</span>,<span class="string">&#x27;But&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;us&#x27;</span>,<span class="string">&#x27;My&#x27;</span>,\</span><br><span class="line">                <span class="string">&#x27;This&#x27;</span>,<span class="string">&#x27;We&#x27;</span>,<span class="string">&#x27;These&#x27;</span>,<span class="string">&#x27;You&#x27;</span>,<span class="string">&#x27;For&#x27;</span>,<span class="string">&#x27;She&#x27;</span>,<span class="string">&#x27;He&#x27;</span>,<span class="string">&#x27;Yet&#x27;</span>,<span class="string">&#x27;As&#x27;</span>]</span><br><span class="line"><span class="comment">#newStopWords定义不需要筛选的词语</span></span><br><span class="line">stop_words.extend(newStopWords)</span><br><span class="line"><span class="comment">#将不需要统计的词语添加到nltk的stopwords字典中</span></span><br><span class="line"><span class="built_in">list</span> = os.listdir(<span class="string">&#x27;C:/Users/25496/Desktop/建模/原文&#x27;</span>)</span><br><span class="line"><span class="comment">#list声明需要进行词频统计的文章的存储路径（本脚本会将该路径下所有的文档进行词频统计）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">for</span> content <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;C:/Users/25496/Desktop/建模/原文/&#x27;</span>+content, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 读取文件中的字符串</span></span><br><span class="line">        txt = f.read()</span><br><span class="line">        <span class="comment"># 去除字符串中的标点、数字等</span></span><br><span class="line">        txt = re.sub(<span class="string">&#x27;[,\.()&quot;:;!@#$%^&amp;*\d]|\&#x27;s|\&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, txt)</span><br><span class="line">        <span class="comment"># 替换换行符，大小写转换，拆分成单词列表</span></span><br><span class="line">        word_list = txt.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27; &#x27;</span>).replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>).lower().split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        word_tokens = word_tokenize(txt)</span><br><span class="line">        filtered_sentence = []</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> word_tokens:</span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> stop_words:</span><br><span class="line">                filtered_sentence.append(w)</span><br><span class="line">        word_count_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> filtered_sentence:</span><br><span class="line">            <span class="comment"># 统计字典中的词频</span></span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">in</span> word_count_dict.keys():</span><br><span class="line">                word_count_dict[word] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                word_count_dict[word] = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 按照单词出现次数排序</span></span><br><span class="line">        word_count_dict = <span class="built_in">sorted</span>(word_count_dict.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 输出到文件（如果是多个文件会输出到同一目录下）</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:/Users/25496/Desktop/建模/结果/result_&quot;</span>+content, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)<span class="keyword">as</span> f1:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> word_count_dict:</span><br><span class="line">                f1.write(<span class="string">&quot;%s\t%s\n&quot;</span> % (i[<span class="number">0</span>], <span class="built_in">str</span>(i[<span class="number">1</span>])))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>容易出现的问题：</strong></p><p>导nltk的数据包报错</p><p>在安装nltk的包之后我们还需要去安装nltk的数据包，至于缺少的数据包，这里作者建议各位在调试上述程序运行时的报错信息来确认缺少的数据包，下载时可以在python控制台输入如下指令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一种：图形用户界面,这种方式会生成一个图形用户界面，用户根据自己的需求来下载需要的数据包</span></span><br><span class="line">nltk.download()</span><br><span class="line"><span class="comment">#第二种：命令行下载</span></span><br><span class="line">nltk.download(<span class="string">&#x27;【包名】&#x27;</span>)</span><br></pre></td></tr></table></figure><p>常有报错：</p><p>（本机积极拒绝等。。。）这种问题出现的原因作者也出现了，多试几次之后莫名其妙就成功了。</p><p><em>2.词云生成</em></p><p><strong>词云：</strong>如各位所见就是由多个词汇组合而成的一种图片，适合在各种场合使用</p><p><strong>实现方式：</strong>调用wordcloud库（这个库好像需要matlab的库作为依赖）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> PIL.Image <span class="keyword">as</span> image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#list定义了需要做词频分析的文件的存储路径</span></span><br><span class="line"><span class="built_in">list</span> = os.listdir(<span class="string">&#x27;C:/Users/25496/Desktop/建模/原文&#x27;</span>)</span><br><span class="line"><span class="comment">#mask定义了一个图形蒙版</span></span><br><span class="line">mask = np.array(image.<span class="built_in">open</span>(<span class="string">&quot;C:/Users/25496/Desktop/建模/模板/timg.jpg&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> content <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;C:/Users/25496/Desktop/建模/原文/&#x27;</span> + content,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        text = fp.read()</span><br><span class="line">    <span class="comment"># print(text)</span></span><br><span class="line">        <span class="comment">#生成词云</span></span><br><span class="line">        wordcloud = WordCloud(background_color=<span class="string">&quot;white&quot;</span>,mask=mask).generate(text)</span><br><span class="line">        wordcloud.to_file(<span class="string">&quot;C:/Users/25496/Desktop/建模/词云/img_&quot;</span>+content+<span class="string">&quot;.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>WordCloud（）方法内置的一些属性：</strong></p><p>该方法可用来定义词云的基本属性</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">width</td><td align="center"><strong>指定词云对象生成图片的宽度，默认400像素</strong></td></tr><tr><td align="center">height</td><td align="center"><strong>指定词云对象生成图片的高度，默认200像素</strong></td></tr><tr><td align="center">min_font_size</td><td align="center"><strong>指定词云中字体的最小字号，默认4号</strong></td></tr><tr><td align="center">max_font_size</td><td align="center"><strong>指定词云中字体的最大字号，根据高度自动调节</strong></td></tr><tr><td align="center">font_step</td><td align="center"><strong>指定词云中字体字号的步进间隔，默认为1</strong></td></tr><tr><td align="center">font_path</td><td align="center"><strong>指定字体文件的路径，默认None</strong></td></tr><tr><td align="center">max_words</td><td align="center"><strong>指定词云显示的最大单词数量，默认200</strong></td></tr><tr><td align="center">stop_words</td><td align="center"><strong>指定词云的排除词列表，即不显示的单词列表</strong></td></tr><tr><td align="center">mask</td><td align="center"><strong>指定词云形状，默认为长方形，需要指定mask</strong></td></tr><tr><td align="center">background_color</td><td align="center"><strong>指定词云图片的背景颜色，默认为黑色</strong></td></tr></tbody></table><p><strong>mask要求：</strong>作为蒙版，需要是白底的图片，词云将会以图片深色部分作为轮廓生成</p>]]></content>
      
      
      <categories>
          
          <category> Python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> nltk </tag>
            
            <tag> wordcloud </tag>
            
            <tag> Python数据分析 </tag>
            
            <tag> 建模 </tag>
            
            <tag> 词频分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/daydream/2020/10/16/hello-world/"/>
      <url>/daydream/2020/10/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hallo World ! </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零散学习日记1</title>
      <link href="/daydream/2020/09/05/Day01%202020.9.6%20%20%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01/"/>
      <url>/daydream/2020/09/05/Day01%202020.9.6%20%20%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<p>博主比较懒也比较菜，学习日记这种东西更新绝对不会太频繁！</p><span id="more"></span><h1 id="Day01-2020-9-6-学习日记1"><a href="#Day01-2020-9-6-学习日记1" class="headerlink" title="Day01 2020.9.6  学习日记1"></a>Day01 2020.9.6  学习日记1</h1><ol><li><p>role属性</p><ul><li>role属性的作用是告诉Accesibility类应用（如屏幕阅读器等）当前元素的作用，可以增强文本的可读性和语义化</li><li>在Html5元素内，标签本身就是有语义的，因此role可以作为可选属性使用，但类似于Bootstrap中都很重视类似的属性和声明，目的是为了兼容老版浏览器</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--role属性的使用--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--标明页面容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">role</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">role</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--标明该处是导航--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--标明页面主体--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span>text<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span>example<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span> <span class="attr">role</span> =<span class="string">&quot;complementary&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span> <span class="attr">role</span> =<span class="string">&quot;complementary&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">role</span>=<span class="string">&quot;contentinfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义图标的方法</p><ul><li>图标：在网页导航栏中显示的网页标签中文字前方的图标</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--首先准备一张16*16px的图标（网页专用）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在HTML5文档中输入如下代码即可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>流的定义</p><ul><li>流表示图表，照片，图形，插图，代码片段等独立的内容，在HTML5之前没有专门实现这个目的的元素，一些开发人员使用没有语义的div元素来表示</li><li>HTML5使用figure和figcaption引入流，其中figcaption表示流的标题，流的标题不是必须的，但如果包含它，就必须是figure内嵌的第一个或者最后一个元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>XXXXXXXX<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>picture标签及响应式效果的实现</p><ul><li><p>picture标签属性：</p><ol><li>srcset：必需，设置图片文件路径，如“srcset=”img/minpic.png””，或者是用逗号分隔的用像素密度描述的图片路径，如“srcset=”img/minpic.png,img/maxpic.png 2x””</li><li><em>media</em> ：设置媒体查询，如media=”(min-width:320px)”</li><li>sizes:设置宽度，如sizes=”100vw”，或是媒体查询宽度，如sizes=”(min-width:320px) 100vw”,可用逗号分隔形成媒体查询宽度列表</li><li>type：设置MIME类型，如type=”image/webp”或者type=”image/vnd.ms-photo”</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width:650px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;images/kitten-large.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width:456px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;images/kitten-medium.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--img标签用于不支持picture元素的浏览器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/kitten-small.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;a cute kitten&quot;</span> <span class="attr">id</span>=<span class="string">&quot;picimg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 零散 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql指令(不定时更新)</title>
      <link href="/daydream/2020/09/05/Mysql%E6%8C%87%E4%BB%A4%EF%BC%88%E8%BE%B9%E5%AD%A6%E8%BE%B9%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/daydream/2020/09/05/Mysql%E6%8C%87%E4%BB%A4%EF%BC%88%E8%BE%B9%E5%AD%A6%E8%BE%B9%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>更新全凭心情，学习时间随机</p><span id="more"></span><h1 id="Mysql指令（边学边更新）"><a href="#Mysql指令（边学边更新）" class="headerlink" title="Mysql指令（边学边更新）"></a>Mysql指令（边学边更新）</h1><ol><li><p>安装服务： mysqld –install</p></li><li><p>初始化：mysqld –initialize –console</p></li><li><p>开启服务：net start mysql</p></li><li><p>关闭服务：net stop mysql</p></li><li><p>登录mysql：mysql -u root -p</p><p>​    Enter PassWord：（密码）</p></li><li><p> 修改密码：alter user ‘root’@’localhost’ identified by ‘root’</p></li><li><p> 标记删除mysql服务：sc delete mysql</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 后端 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python+opencv自学笔记（1）</title>
      <link href="/daydream/2020/06/05/python+opencv%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
      <url>/daydream/2020/06/05/python+opencv%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="python-opencv自学笔记（1）"><a href="#python-opencv自学笔记（1）" class="headerlink" title="python+opencv自学笔记（1）"></a>python+opencv自学笔记（1）</h1><h2 id="读取图像"><a href="#读取图像" class="headerlink" title="读取图像"></a><em>读取图像</em></h2><p>示例：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">src=cv.imread(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">cv.namedWindow(<span class="string">&#x27;input_image&#x27;</span>, cv.WINDOW_AUTOSIZE)</span><br><span class="line">cv.imshow(<span class="string">&#x27;input_image&#x27;</span>, src)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><ul><li><h3 id="cv-imread-方法"><a href="#cv-imread-方法" class="headerlink" title="cv.imread()方法"></a><code>cv.imread()</code>方法</h3></li></ul><p><em>参数：</em></p><p><code>cv.imread(&#39;path&#39;)</code></p><p><em>作用：</em></p><p>读取path路径下的图片（<strong>注意：path要为绝对路径且保证全英文</strong>）</p><ul><li><h3 id="cv-namedWidow-方法"><a href="#cv-namedWidow-方法" class="headerlink" title=" cv.namedWidow()方法"></a><code> cv.namedWidow()</code>方法</h3></li></ul><p><em>参数：</em></p><p><code>cv.namedWindow(&#39;image&#39;,cv.Window_AUUTOSIZE)</code></p><p><em>作用：</em></p><p>用于创建一个窗口，第一个参数为窗口的名称，第二个参数则是窗口的属性（可以省略，默认值为cv.WINDOW_AUTOSIZE）</p><ul><li><h3 id="cv-imshow-方法"><a href="#cv-imshow-方法" class="headerlink" title="cv.imshow()方法"></a><code>cv.imshow()</code>方法</h3></li></ul><p><em>参数：</em></p><p><code>cv.imshow(&#39;image&#39;,src)</code></p><p><em>作用：</em></p><p>在指定的窗口显示一副图像，第一个参数是窗口名称，第二个参数是图片对象</p><p>（<strong>注意：该方法可与上文中cv.namedWindow()联合使用，指定窗口的属性，然后在窗口中显示图片</strong>）</p><ul><li><h3 id="cv-waitKey-方法"><a href="#cv-waitKey-方法" class="headerlink" title=" cv.waitKey()方法"></a><code> cv.waitKey()</code>方法</h3></li></ul><p><em>参数：</em></p><p><code>cv.waitKey(0)</code></p><p>参数=0：（<em>可以是小于0的数值</em>）一直显示，无返回值  ，如果在键盘上按某个键会消失，则返回值为该按键对应的ascii码</p><p>参数&gt;=0： 该参数表示显示多少毫秒   超过该时间则返回-1</p><ul><li><h3 id="cv-destroyAllWindows"><a href="#cv-destroyAllWindows" class="headerlink" title="cv.destroyAllWindows()"></a><code>cv.destroyAllWindows()</code></h3></li></ul><p><em>参数：</em></p><p>无参数</p><p><em>作用：</em></p><p>删除建立的全部窗口（<strong>注意：该删除并非是指关闭显示出来的窗口，而是删除创建窗口所占用的内存</strong>），释放资源</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 机器视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
